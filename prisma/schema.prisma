generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model candidate {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  image       String?
  is_person   Boolean
  clerkId     String? @db.VarChar(255)

  // Σχέση με user μέσω clerkId (μοναδική)
  user user? @relation(fields: [clerkId], references: [clerkId])

  takepart takepart[]
  votes    Vote[]
}

model election {
  id                Int       @id @default(autoincrement())
  title             String
  description       String?
  start_date        DateTime
  end_date          DateTime
  is_active         Boolean
  target_occupation String?
  target_location   String?
  birthdate_min     DateTime?
  birthdate_max     DateTime?
  target_gender     String?
  userId            Int

  user            user              @relation(fields: [userId], references: [id], map: "Election_userId_fkey")
  poll_candidates poll_candidates[]
  takepart        takepart[]
  votes           Vote[]

  @@index([userId], map: "Election_userId_fkey")
}

model poll_candidates {
  id         Int      @id @default(autoincrement())
  poll_id    Int
  user_id    Int
  invited_at DateTime @default(now()) @db.DateTime(0)

  election election @relation(fields: [poll_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_pc_poll")
  user     user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_pc_user")

  @@index([poll_id], map: "idx_poll")
  @@index([user_id], map: "idx_user")
}

model takepart {
  electionId    Int
  candidateId   Int
  numberOfVotes Int

  candidate candidate @relation(fields: [candidateId], references: [id], map: "TakePart_candidateId_fkey")
  election  election  @relation(fields: [electionId], references: [id], map: "TakePart_electionId_fkey")

  @@id([electionId, candidateId])
  @@index([candidateId], map: "TakePart_candidateId_fkey")
}

model user {
  id         Int       @id @default(autoincrement())
  clerkId    String    @unique(map: "User_clerkId_key")
  fullName   String
  username   String    @unique(map: "User_username_key")
  password   String
  isAdmin    Boolean
  gender     String?
  email      String    @unique(map: "User_email_key")
  birthdate  DateTime?
  occupation String?
  location   String?

  // Αντίστροφη σχέση από candidate προς user μέσω clerkId
  candidates candidate[]

  election        election[]
  poll_candidates poll_candidates[]
  votes           Vote[]
}

model Vote {
  id          Int       @id @default(autoincrement())
  user        user      @relation(fields: [userId], references: [id])
  userId      Int
  election    election  @relation(fields: [electionId], references: [id])
  electionId  Int
  candidate   candidate @relation(fields: [candidateId], references: [id])
  candidateId Int
  votedAt     DateTime  @default(now())

  @@unique([userId, electionId])
}
